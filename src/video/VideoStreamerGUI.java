/*
 * Copyright Â© 2008 Ron de Jong (ronuitzaandam@gmail.com).
 *
 * This is free software; you can redistribute it 
 * under the terms of the Creative Commons License
 * Creative Commons License: (CC BY-NC-ND 4.0) as published by
 * https://creativecommons.org/licenses/by-nc-nd/4.0/ ; either
 * version 4.0 of the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * Creative Commons Attribution-NonCommercial-NoDerivatives 4.0
 * International Public License for more details.
 *
 * You should have received a copy of the Creative Commons 
 * Public License License along with this software;
 */

package video;

import video.VideoStreamer;
import java.net.*;

/**
 *
 * @author ron
 */
public class VideoStreamerGUI extends javax.swing.JFrame {

    private InetAddress myIP = null;

    /**
     *
     */
    public static String bufferDisplay = "";
    private VideoStreamer myVideoTool = null;
    private Boolean powerOn = false;

    // Constructor

    /**
     *
     * @param sourceIPParam
     * @param sourcePortParam
     * @param destIPParam
     * @param destPortParam
     */
        public VideoStreamerGUI(String sourceIPParam, String sourcePortParam, String destIPParam, String destPortParam)
    {
        initComponents();
        try { myIP = InetAddress.getLocalHost(); } catch( UnknownHostException error) { showStatus("Error: InetAddress.getLocalHost(): " + error.getMessage()); }
        sourceIPField.setText(sourceIPParam);
        sourcePortField.setText(sourcePortParam);
        destIPField.setText(destIPParam);
        destPortField.setText(destPortParam);
    }

    /**
     *
     * @param args
     */
    public static void main(final String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                if ( args.length != 4)
                {
                    System.out.println("Usage: VideoToolGUI \"sourceIP\" \"sourcePort\" \"destIP\" \"destPort\"\n"); return;
                }
                else
                {
                    new VideoStreamerGUI(args[0] , args[1] , args[2] , args[3]).setVisible(true);
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        streamButtonsPanel = new javax.swing.JPanel();
        startStreamButton = new javax.swing.JButton();
        stopStreamButton = new javax.swing.JButton();
        fieldsPanel = new javax.swing.JPanel();
        peerIPLabel = new javax.swing.JLabel();
        peerIPLabel1 = new javax.swing.JLabel();
        receivePortLabel = new javax.swing.JLabel();
        destPortLabel = new javax.swing.JLabel();
        audioFormatLabel = new javax.swing.JLabel();
        sourceIPField = new javax.swing.JTextField();
        sourcePortField = new javax.swing.JTextField();
        destIPField = new javax.swing.JTextField();
        destPortField = new javax.swing.JTextField();
        audioFormatBox = new javax.swing.JComboBox();
        statusDisplayPane = new javax.swing.JScrollPane();
        textDisplay = new javax.swing.JEditorPane();
        powerButton = new javax.swing.JButton();
        statusDisplayPane1 = new javax.swing.JScrollPane();
        statusDisplay = new javax.swing.JEditorPane();
        filenameField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        streamButtonsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        streamButtonsPanel.setName("streamButtonsPanel"); // NOI18N
        streamButtonsPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                streamButtonsPanelMouseClicked(evt);
            }
        });

        startStreamButton.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        startStreamButton.setText("Start Stream");
        startStreamButton.setMaximumSize(new java.awt.Dimension(120, 30));
        startStreamButton.setMinimumSize(new java.awt.Dimension(120, 30));
        startStreamButton.setName("startStreamButton"); // NOI18N
        startStreamButton.setPreferredSize(new java.awt.Dimension(120, 30));
        startStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStreamButtonActionPerformed(evt);
            }
        });

        stopStreamButton.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        stopStreamButton.setText("Stop Stream");
        stopStreamButton.setMaximumSize(new java.awt.Dimension(120, 30));
        stopStreamButton.setMinimumSize(new java.awt.Dimension(120, 30));
        stopStreamButton.setName("stopStreamButton"); // NOI18N
        stopStreamButton.setPreferredSize(new java.awt.Dimension(120, 30));
        stopStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopStreamButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout streamButtonsPanelLayout = new org.jdesktop.layout.GroupLayout(streamButtonsPanel);
        streamButtonsPanel.setLayout(streamButtonsPanelLayout);
        streamButtonsPanelLayout.setHorizontalGroup(
            streamButtonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(streamButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(startStreamButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 293, Short.MAX_VALUE)
                .add(stopStreamButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        streamButtonsPanelLayout.setVerticalGroup(
            streamButtonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(streamButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(streamButtonsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(startStreamButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(stopStreamButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fieldsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fieldsPanel.setName("fieldsPanel"); // NOI18N

        peerIPLabel.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        peerIPLabel.setText("Source IP");
        peerIPLabel.setName("peerIPLabel"); // NOI18N

        peerIPLabel1.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        peerIPLabel1.setText("Source Port");
        peerIPLabel1.setName("peerIPLabel1"); // NOI18N

        receivePortLabel.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        receivePortLabel.setText("Dest IP");
        receivePortLabel.setName("receivePortLabel"); // NOI18N

        destPortLabel.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        destPortLabel.setText("Dest Port");
        destPortLabel.setName("destPortLabel"); // NOI18N

        audioFormatLabel.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        audioFormatLabel.setText("Audio Format");
        audioFormatLabel.setName("audioFormatLabel"); // NOI18N

        sourceIPField.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        sourceIPField.setName("sourceIPField"); // NOI18N

        sourcePortField.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        sourcePortField.setName("sourcePortField"); // NOI18N

        destIPField.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        destIPField.setName("destIPField"); // NOI18N

        destPortField.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        destPortField.setName("destPortField"); // NOI18N

        audioFormatBox.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        audioFormatBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPEG_RTP", "H263", "H263_RTP", "H263_2_RTP", "MPEG_RTP", " " }));
        audioFormatBox.setName("audioFormatBox"); // NOI18N

        org.jdesktop.layout.GroupLayout fieldsPanelLayout = new org.jdesktop.layout.GroupLayout(fieldsPanel);
        fieldsPanel.setLayout(fieldsPanelLayout);
        fieldsPanelLayout.setHorizontalGroup(
            fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(audioFormatLabel)
                    .add(peerIPLabel1)
                    .add(receivePortLabel)
                    .add(destPortLabel)
                    .add(peerIPLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 361, Short.MAX_VALUE)
                .add(fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(audioFormatBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(destPortField)
                    .add(destIPField)
                    .add(sourcePortField)
                    .add(sourceIPField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                .addContainerGap())
        );
        fieldsPanelLayout.setVerticalGroup(
            fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, fieldsPanelLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .add(fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sourceIPField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(peerIPLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(peerIPLabel1)
                    .add(sourcePortField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(receivePortLabel)
                    .add(destIPField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(destPortField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(destPortLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fieldsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(audioFormatLabel)
                    .add(audioFormatBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(30, 30, 30))
        );

        statusDisplayPane.setHorizontalScrollBar(null);
        statusDisplayPane.setName("statusDisplayPane"); // NOI18N

        textDisplay.setBackground(new java.awt.Color(230, 230, 230));
        textDisplay.setEditable(false);
        textDisplay.setFont(new java.awt.Font("Courier New", 0, 8)); // NOI18N
        textDisplay.setDragEnabled(false);
        textDisplay.setMinimumSize(new java.awt.Dimension(600, 200));
        textDisplay.setName("textDisplay"); // NOI18N
        textDisplay.setPreferredSize(new java.awt.Dimension(600, 200));
        textDisplay.setRequestFocusEnabled(false);
        textDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textDisplayMouseClicked(evt);
            }
        });
        statusDisplayPane.setViewportView(textDisplay);

        powerButton.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        powerButton.setText("Power");
        powerButton.setName("powerButton"); // NOI18N
        powerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerButtonActionPerformed(evt);
            }
        });

        statusDisplayPane1.setHorizontalScrollBar(null);
        statusDisplayPane1.setName("statusDisplayPane1"); // NOI18N

        statusDisplay.setBackground(new java.awt.Color(230, 230, 230));
        statusDisplay.setEditable(false);
        statusDisplay.setFont(new java.awt.Font("STHeiti", 0, 8)); // NOI18N
        statusDisplay.setDragEnabled(false);
        statusDisplay.setMinimumSize(new java.awt.Dimension(600, 200));
        statusDisplay.setName("statusDisplay"); // NOI18N
        statusDisplay.setPreferredSize(new java.awt.Dimension(600, 200));
        statusDisplay.setRequestFocusEnabled(false);
        statusDisplayPane1.setViewportView(statusDisplay);

        filenameField.setFont(new java.awt.Font("STHeiti", 0, 13)); // NOI18N
        filenameField.setText("file://var/tmp/softphone.mov");
        filenameField.setName("filenameField"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(streamButtonsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(statusDisplayPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, statusDisplayPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, fieldsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, filenameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(233, 233, 233)
                        .add(powerButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(powerButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusDisplayPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusDisplayPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fieldsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(filenameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(streamButtonsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textDisplayMouseClicked
        resetStatusDisplay();
}//GEN-LAST:event_textDisplayMouseClicked

    private void startStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStreamButtonActionPerformed
        myVideoTool.startStreamer(destIPField.getText(), destPortField.getText(), filenameField.getText().toString(), audioFormatBox.getSelectedIndex());
    }//GEN-LAST:event_startStreamButtonActionPerformed

    private void stopStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopStreamButtonActionPerformed
        myVideoTool.stopMedia();
        myVideoTool.startListener(sourceIPField.getText(), sourcePortField.getText(), destIPField.getText(), destPortField.getText());
    }//GEN-LAST:event_stopStreamButtonActionPerformed

    @SuppressWarnings("static-access")
    private void powerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerButtonActionPerformed

        if ( powerOn == false ) // powering on
        {
            myVideoTool = new VideoStreamer();
            myVideoTool.startListener(sourceIPField.getText(), sourcePortField.getText(), destIPField.getText(), destPortField.getText());
            powerOn = true;

            sourceIPField.setEnabled(false);
            sourcePortField.setEnabled(false);
            this.showStatus("Media listener started.");

        }
        else if (powerOn == true) // powering off
        {
            powerOn = false;

            myVideoTool.stopMedia();
            myVideoTool.stopListener();
            
            sourceIPField.setEnabled(true);
            sourcePortField.setEnabled(true);
            this.showStatus("Power Off");
//            resetStatusDisplay();
        }

    }//GEN-LAST:event_powerButtonActionPerformed

        private void streamButtonsPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamButtonsPanelMouseClicked
            myVideoTool.getMultiMediaStatus();
        }//GEN-LAST:event_streamButtonsPanelMouseClicked

    /**
    * @param args the command line arguments
    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox audioFormatBox;
    private javax.swing.JLabel audioFormatLabel;
    private javax.swing.JTextField destIPField;
    private javax.swing.JTextField destPortField;
    private javax.swing.JLabel destPortLabel;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JTextField filenameField;
    private javax.swing.JLabel peerIPLabel;
    private javax.swing.JLabel peerIPLabel1;
    private javax.swing.JButton powerButton;
    private javax.swing.JLabel receivePortLabel;
    private javax.swing.JTextField sourceIPField;
    private javax.swing.JTextField sourcePortField;
    private javax.swing.JButton startStreamButton;
    private static javax.swing.JEditorPane statusDisplay;
    private javax.swing.JScrollPane statusDisplayPane;
    private javax.swing.JScrollPane statusDisplayPane1;
    private javax.swing.JButton stopStreamButton;
    private javax.swing.JPanel streamButtonsPanel;
    private static javax.swing.JEditorPane textDisplay;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param displaymessage
     */
    public static void display(String displaymessage)
    {
        bufferDisplay += displaymessage + "\n";
        textDisplay.setText(bufferDisplay);
    }

    /**
     *
     */
    public static void resetDisplay()
    {
        bufferDisplay = "";
        textDisplay.setText(bufferDisplay);
    }

    /**
     *
     * @param displaystatus
     */
    public static void showStatus(String displaystatus)
    {
        statusDisplay.setText(displaystatus);
    }

    /**
     *
     */
    public static void resetStatusDisplay()
    {
        textDisplay.setText("");

    }
//    public void main(String sourceIPParam, String sourcePortParam, String destIPParam, String destPortParam) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() { new VideoToolGUI(sourceIPField,  sourcePortField,  destIPField,  destPort).setVisible(true); }
//        });
//    }
}
